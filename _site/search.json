[
  {
    "objectID": "software/mcu/index.html",
    "href": "software/mcu/index.html",
    "title": "MCU Design",
    "section": "",
    "text": "This project employs the STM32 Nucleo-32 board with an STM32L432KC MCU, facilitating direct I2C communication with three LSM6DSO32 IMUs from AdaFruit. The received data is converted into helpful information for the FPGA, and the generated data is sent to the FPGA via 3 digital outputs. On this page, I am focusing on the software side of the MCU system."
  },
  {
    "objectID": "software/mcu/index.html#addressing-i2c",
    "href": "software/mcu/index.html#addressing-i2c",
    "title": "MCU Design",
    "section": "Addressing (I2C)",
    "text": "Addressing (I2C)\nTo fully take advantage of I2C, we chain together multiple IMUs on one I2C communication bus. The chip address must be changed on one of the chips to alter the LSB of the address value. The figure below highlights what needed to be bridged to achieve this configuration.\n\n\n\n\nIMU Backside source link\n\n\n\nConfiguring IMU Accelerometer\nConfiguration of the IMU accelerometer peripheral allows us to alter the communication speed, resolution, range, and other data parameters we receive. For our use, the CTRL1_XL register was configured with an ODR at 104Hz (normal mode), +/- 8g range, and enabled LPF2 data filtering.\n\n\n\nLSM6DS032 Accelerometer Control Register datasheet"
  },
  {
    "objectID": "software/mcu/index.html#configuring-imu-accelerometer",
    "href": "software/mcu/index.html#configuring-imu-accelerometer",
    "title": "MCU Design",
    "section": "Configuring IMU Accelerometer",
    "text": "Configuring IMU Accelerometer\nConfiguration of the IMU accelerometer peripheral allows us to alter the communication speed, resolution, range, and other data parameters we receive. For our use, the CTRL1_XL register was configured with an ODR at 104Hz (normal mode), +/- 8g range, and enabled LPF2 data filtering.\n\n\n\nLSM6DS032 Accelerometer Control Register datasheet"
  },
  {
    "objectID": "software/mcu/index.html#gpiox-xab",
    "href": "software/mcu/index.html#gpiox-xab",
    "title": "MCU Design",
    "section": "GPIOx (x=A,B)",
    "text": "GPIOx (x=A,B)\nThe GPIO pins used correspond to the peripherals we are using (I2C1, I2C3, GPIOA, and GPIOB), which can be found in the STM32L432KC Datasheet under Table 14. After ensuring that all communication lines do not overlap and that all pins required by all peripherals are accessible, the configuration of each pin must take place. More on this later."
  },
  {
    "objectID": "software/mcu/index.html#i2c1-i2c3",
    "href": "software/mcu/index.html#i2c1-i2c3",
    "title": "MCU Design",
    "section": "I2C1 & I2C3",
    "text": "I2C1 & I2C3\nI2C communication was used for this project for 2 reasons. As discussed in the Addressing (I2C) section above, I2C allows us to communicate with multiple chips on the same communication bus. This is a critical function for this implementation considering that we require 3 IMUs. Yet, our MCU only has 2 I2C peripherals, (I2C1 and I2C3). It is also noted that our IMUs only have 2 distinct configurable addresses, thus our I2C1 peripheral will communicate with the first 2 chips and I2C3 will communicate with the 3rd chip as seen in the MCU implementation circuit schematic above.\nThe implementation of I2C in general includes initialization, writing, and reading as explained below. Writing and reading will be used within initialization to configure and verify the proper function of the IMUs, while after such configuration is completed, our while loop will solely depend on the read function to gather data from all involved accelerometer registers in the accused IMU.\n\nInitialization\nFirst, I2C peripherals data and clock lines were configured in alternate function mode. The OSPEEDR registers were configured for high-speed GPIO functionality, to ensure proper data capture. The respective AFR registers must also be configured to correspond to I2C communication lines. The I2C initialization functions also configure the RCC registers to enable the I2C clock line to get the 8MHz MSI system clock.\nThen comes the I2Cx (where x=1,3) configuration where bits and transmit interrupts are enabled. Configuration of the TIMINGR registers must also take place to ensure cohesive SCL speed between the MCU and IMUs, 100kHz standard mode was used for this project. As seen below in table 181, found in the STM32L432KC Reference Manual, all corresponding registers were configured to match that of the 100kHz standard mode.\n\n\n\nAfter configuration, a WHO_AM_I register that holds a set known value exists in the IMU. Reading this register along with a brief check that the correct value is read, provides a gate for which the code can not pass unless I2C is functioning as expected. Allowing us to know if I2C communication is working correctly.\n\n\nWriting With I2C\nWriting to the IMU from the MCU over I2C follows the example waveform shown below, found in Figure 371 of the STM32L432KC Reference Manual\n\n\n\nSTM32L432KC I2C Example Master Transmit\n\n\nWhen being written too, the IMU expects the following pattern, as found in the LSM6DSO32 datasheet\n\n\n\n\n\nLSM6DSO32 Example Master Write to Slave\n\n\n\n\n\nReading With I2C\nReading from the IMU to the MCU over I2C follows the example waveform shown below, found in Figure 374 of the STM32L432KC Reference Manual\n\n\n\n\nSTM32L432KC I2C Example Master Receive\n\n\n\nWhen being reading from, the IMU expects the following pattern, as found in the LSM6DSO32 datasheet\n\n\n\n\n\nLSM6DSO32 Example Master Read from Slave\n\n\n\n\n\nSimulation\nBecause during our initialization process of the I2C peripherals, where we read the WHO_AM_I register and halt the program if data is not read correctly, we could assume that I2C operates correctly. During the debug process, the ADALM2000 Logic Analyzer was used to view communication traces. Below is shown an example trace including reading of the WHO_AM_I register, and configuring the CTRL1_XL accelerometer control register on the IMU.\n\n\n\n\nExample Read of WHO_AM_I Regsiter, and Configuration of CTRL1_XL IMU Register"
  },
  {
    "objectID": "software/mcu/index.html#simulation-1",
    "href": "software/mcu/index.html#simulation-1",
    "title": "MCU Design",
    "section": "Simulation",
    "text": "Simulation\nThe simulation below reflects the 3-pin analog output states as the femur IMU is rotated from verticle to 90 degrees, simulating a squat motion for that leg segment. As seen, there exist 8 clear states.\n\n\n\n\nAnalog Output Signals Throughout a Squat Motion"
  },
  {
    "objectID": "software/fpga/index.html",
    "href": "software/fpga/index.html",
    "title": "FPGA Design",
    "section": "",
    "text": "For this project the FPGA was selected to drive the VGA display due to its ability to handle the timing requirements of the VGA protocol. In this section we will describe the VGA protocol and the FPGA design that was used to drive the display."
  },
  {
    "objectID": "software/fpga/index.html#vga-protocol",
    "href": "software/fpga/index.html#vga-protocol",
    "title": "FPGA Design",
    "section": "VGA Protocol:",
    "text": "VGA Protocol:\nThe VGA protocol originated with the intended purpose of displaying images on cathode ray tubes (CRTs) with a resolution of 640 x 480 pixels. These CRTs would strobe an electron beam across the display from left to right and top to bottom, exciting flourescent material to display ultimately display an image. a 15-pin connector was used to transmit the necessary analog color data, vsync/hsync signals, while providing alternative functions with I2C clock and data signals.\n\n\n\n\nFigure 1. VGA Protocol\n\n\n\nWhile the original specification included additional functionality such as I²C data channels (DDC) for EDID communication, in this project we only use: - 4-bit Color Data (r, g, b): These digital outputs from the FPGA are converted into analog signals using a simple resistor DAC. - Horizontal Sync (hs): A signal controlling the start of a new display line. - Vertical Sync (vs): A signal controlling the start of a new frame (top of the display).\nOther signals such as the I2C clock and data were not used.\n\n\n\n\nFigure 2.VGA Frame\n\n\n\n\nScan Line Timing\nA single scan line in the VGA protocol is divided into several segments:\n\nFront Porch: This is the time between the end of the visible line and the start of the horizontal sync pulse. It allows the electron beam to move from the end of the line back to the start of the next line.\nHorizontal Sync Pulse: This is a short pulse that indicates the end of a scan line and the start of the next. It is used to synchronize the display’s horizontal scanning.\nBack Porch: This is the time after the horizontal sync pulse and before the start of the visible line. It allows the electron beam to stabilize before starting to draw the next line.\nVisible Area: This is the part of the scan line where the actual image data is displayed.\n\n\n\nFrame Timing\nSimilarly, a frame is divided into:\n\nVertical Front Porch: The time between the end of the visible frame and the start of the vertical sync pulse.\nVertical Sync Pulse: A pulse indicating the end of a frame and the start of the next. It synchronizes the vertical scanning.\nVertical Back Porch: The time after the vertical sync pulse and before the start of the visible frame.\nVisible Frame: The area where the image data is displayed.\n\nThese timing segments are crucial for ensuring that the display correctly interprets the signals and displays the image as intended. In order to write the FPGA code we made reference of Chapter 9 in the book Digital Design and Computer Architecture by David Harris and Sarah Harris. We will describe the FPGA design in the next section.\n\n\nVGA Block Diagram\nThe VGA module is responsible for generating the necessary signals to drive a VGA display. It consists of several key components:\n\nVGA Module: This is the top-level module that integrates all the components required for VGA signal generation. It takes inputs such as a reset signal and a frame switch, and outputs VGA clock, sync signals, and color data.\nInternal High-Speed Oscillator (HSOSC): Provides a base clock signal which is used by the PLL to generate the VGA clock.\nPhase-Locked Loop (PLL): Converts the internal oscillator’s frequency to the required 25 MHz VGA clock.\nVGA Controller: Generates horizontal and vertical sync signals, as well as blanking signals, based on the VGA timing specifications.\nVideo Generator (videoGen): Determines the color of each pixel based on the current frame and coordinates. It uses a multiplexer to select the appropriate frame data and checks if the current pixel is within any defined rectangles.\nFrame Modules: Each frame module (e.g., image_frame0, image_frame1, etc.) defines a set of rectangles representing different parts of an image for a specific frame.\nFrame Multiplexer (frame_mux): Selects the appropriate frame data based on the frame_switch input.\nRectangle and Line Generators: These modules determine if the current pixel is within a defined rectangle or on a line, respectively.\n\nThe block diagram below illustrates the interconnections between these components:\n\n\n\n\nFigure 4. VGA Block Diagram"
  },
  {
    "objectID": "software/fpga/index.html#parallel-communication-interface",
    "href": "software/fpga/index.html#parallel-communication-interface",
    "title": "FPGA Design",
    "section": "Parallel Communication Interface",
    "text": "Parallel Communication Interface\nTo control which frame is displayed, the microcontroller sets 3 I/O lines to a specific pattern of states (0-7 in binary) to select one of eight predefined frames. Each frame corresponds to a particular arrangement of graphical elements. This simple and low-bandwidth interface allows the microcontroller to direct the FPGA’s video frame output without requiring the MCU to handle the stringent timing or memory requirements associated with full video generation."
  },
  {
    "objectID": "project_logistics/index.html",
    "href": "project_logistics/index.html",
    "title": "Project Logistics",
    "section": "",
    "text": "Bill Of Materials (BOM)\n\n\n\n\nDone using Google Sheets, Link to BOM\n\n\n\n\n\nProject Timeline\n\n\n\n\nDone using Trello.com with BigPicture extension"
  },
  {
    "objectID": "mechanical_design/index.html",
    "href": "mechanical_design/index.html",
    "title": "Mechanical Design",
    "section": "",
    "text": "The mechanical design for this project was minimal due to the scope of the class. The primary task was designing housing units for each IMU. These housings needed to meet several criteria: securely attaching the IMUs to the body using Velcro straps, maintaining a predefined orientation for the IMUs, ensuring wearer comfort, and providing access to the STEMMA quick-connect terminals. The final IMU mount design is shown below. The groove at the bottom of the mount accommodates the solder bridge required to modify specific chip addresses."
  },
  {
    "objectID": "mechanical_design/index.html#isometric-view",
    "href": "mechanical_design/index.html#isometric-view",
    "title": "Mechanical Design",
    "section": "Isometric View",
    "text": "Isometric View"
  },
  {
    "objectID": "mechanical_design/index.html#side-view",
    "href": "mechanical_design/index.html#side-view",
    "title": "Mechanical Design",
    "section": "Side View",
    "text": "Side View"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Squat Hero",
    "section": "",
    "text": "Welcome to our final project for Micro Ps! A class at Harvey Mudd College focused on Microprocessor and FPGA design and application.\nThis project focused on implementing MCU and FPGA functionalities to measure joint angles using IMUs and display a figure on a screen via VGA, providing insights into the user’s squat depth. Tracking body motion is a foundational step in developing many kinematic solutions and serves as the initial phase of a long-term project, further detailed in the Project Ideation tab."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "HMC E155 “Micro Ps” course website"
  },
  {
    "objectID": "about/index.html",
    "href": "about/index.html",
    "title": "About",
    "section": "",
    "text": "This website was created with Quarto and deployed on GitHub pages\n\nReferences\nMicro Ps Website\nSTM32L432KC Datasheet\nSTM32L432KC Reference Manual\nUPduino v3.1 & iCE40 UP5K Datasheet\nUPduino v3.1 & iCE40 UP5K Usage Guide\nSegger Embedded Studio\nLattice Radiant\n\n\nAcknowledgments\nA special thank you to Prof. Josh Brake for structuring this class in such an impactful way. He created a highly effective learning environment and consistently provided help and feedback.\nAdditionally, thank you to Xavier Walters, who has been a mentor to me for years, offering guidance in both ideation and technical work even at odd hours of the night."
  },
  {
    "objectID": "hardware/index.html",
    "href": "hardware/index.html",
    "title": "Hardware",
    "section": "",
    "text": "The goal of this hardware is to facilitate communication between the MCU, FPGA, and IMUs. The schematic below provides a comprehensive overview of the system, including all individual components."
  },
  {
    "objectID": "hardware/index.html#dac-design",
    "href": "hardware/index.html#dac-design",
    "title": "Hardware",
    "section": "DAC Design",
    "text": "DAC Design\nThe FPGA outputs digital color information (4 bits per channel: red, green, blue) at a 3.3 V logic level. To meet the VGA standard, these must be translated into analog signals typically ranging from 0 V (black) to about 0.7 V (full brightness). To achieve this, a simple resistor-based DAC is used. By choosing resistor values in a binary-weighted fashion (e.g., 500Ω, 1kΩ, 2kΩ, and 4kΩ for each bit), and by relying on the 75Ω input impedance of the VGA input as part of the output stage, we can generate the correct voltage range.\n\n\n\n\nDAC Board"
  },
  {
    "objectID": "inventors/index.html",
    "href": "inventors/index.html",
    "title": "Inventors",
    "section": "",
    "text": "Jason Bowman\nEngineering major at Harvey Mudd College (grad 25), with experience in embedded systems, control systems, DSP, mechanical design.\n\n\n\nMicro Ps was a must-take class as I aimed to bridge the gap between idea and product. In the past, I have done personal projects involving digital electronics, where the knowledge gained in this class would have proved immensely helpful. Squat Hero is the first of many future personal projects involving embedded systems and digital electronics that I plan on doing\n\n  🔗 LinkedIn     👤 Jason’s Personal Website     📄 Resume  \n\n\n\nKet Hollingsworth\nJoint Major in Computer Science and Mathematics at Harvey Mudd College (grad 25), with experience in Embedded Systems, Machine Learning, and Software Engineering.\n\n\n\nMuch of my previous research in the field of TinyML and Edge Compute Systems along with my work with ExploraVist has required me to work with embedded systems. At ExploraVist I built an embedded accessibility device, but made extensive use of available libraries and frameworks to do so. I always wanted to understand how these systems worked, and Micro Ps (and this project Squat Hero) acted as a great introduction to the world of digital electronics and embedded systems.\n\n  🔗 LinkedIn"
  },
  {
    "objectID": "project_ideation/index.html",
    "href": "project_ideation/index.html",
    "title": "Project Ideation",
    "section": "",
    "text": "The inspiration for this project came from an idea Jason had in high school while helping middle school students learn proper squat technique. The initial concept was to design a lightweight exoskeleton using motors to apply gentle resistance, guiding users through the ideal squat motion. Unlike traditional exoskeletons, this design would focus on being lightweight, affordable, and non-intrusive. Instead of doing the work for the user, it would act as a guide, helping them develop proper form without overly relying on external assistance. This approach would provide accessible and new-age fitness technology to a broad audience, including personal trainers working to enhance client performance, physical therapists helping patients recover from injuries, athletes refining their technique, and even beginners looking to build confidence and prevent injuries. By prioritizing simplicity and affordability, the design aims to maximize training time and allow the quantification of the squat form to be used for feedback training.\n\n\n\nGeneralization of squat form, image source\n\n\nThis project is an essential stepping stone in our knowledge and product development, aiming to ultimately provide a useful final product to a client. In the scope of Micro Ps, we are integrating IMU functionality, similar to what will be found in the final product, with an FPGA-driving VGA to create a game interface, further details of which can be found under the software section of the website. We chose to use IMUs for position decomposition due to their lightweight and simple-to-use interface, which eliminates the need for extensive mechanical design and complex user calibration associated with hardware-centric potentiometer decoding. Future implementations may include IMU-controlled feedback motors for selected leg joints, enhancing the overall functionality and usability of the system."
  },
  {
    "objectID": "result/index.html",
    "href": "result/index.html",
    "title": "Result",
    "section": "",
    "text": "Demo day is the final day of Micro Ps where we can show off our creation to all students and faculty who want to come. Below you can see the final setup we had ready for demo day, as well as a video of our instructor, Professor Josh Brake demoing our device.\n\n\n\n\nDemo Day Setup\n\n\n\n\n\n\nYour browser does not support the video tag. Please try updating your browser or download the video here. \n\nProf. Brake Testing our Demonstration at Demo Day\n\n\nDemo day was a blast, and we hope everyone enjoyed their experience. If you did not get to try out the Squat Hero product, stay tuned because this is not the end! :)"
  },
  {
    "objectID": "software/index.html",
    "href": "software/index.html",
    "title": "Software",
    "section": "",
    "text": "This section outlines the software implamented using C and SystemVerilog on both the MCU andd FPGA respectively, used to implament this project. Data collection and game logic can be found in the MCU section, while the VGA implamentation will be in the FPGA section.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMCU Design\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFPGA Design\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNo matching items"
  }
]