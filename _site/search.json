[
  {
    "objectID": "software/mcu/index.html",
    "href": "software/mcu/index.html",
    "title": "MCU Design",
    "section": "",
    "text": "The project employs the STM32 Nucleo-32 board with an STM32L432KC MCU, facilitating direct I2C communication with three LSM6DSO32 IMUs from AdaFruit. The received data is converted into helpful information for the FPGA, and the generated data is sent to the FPGA via SPI. On this page, I am focusing on the software side of this system. However, the schematic below will give insight into the hardware implementation of this software’s overall embedded system."
  },
  {
    "objectID": "software/mcu/index.html#addressing-i2c",
    "href": "software/mcu/index.html#addressing-i2c",
    "title": "MCU Design",
    "section": "Addressing (I2C)",
    "text": "Addressing (I2C)\nTo fully take advantage of I2C and chain together multiple IMUs on one I2C communication bus, the chip address must be changed on one of the chips to alter the LSB of the address value. The figure below highlights what needed to be bridged.\n\n\n\nIMU Backside source link"
  },
  {
    "objectID": "software/mcu/index.html#configuring-imu-accelerometer",
    "href": "software/mcu/index.html#configuring-imu-accelerometer",
    "title": "MCU Design",
    "section": "Configuring IMU Accelerometer",
    "text": "Configuring IMU Accelerometer\nConfiguration of the IMU accelerometer peripheral allows us to configure the communication speed, resolution, range, and other data parameters we receive. For our use, the CTRL1_XL register was configured with an ODR at 104Hz (normal mode), +/- 8g range, and enable LPF2 data filtering.\n\n\n\nLSM6DS032 Accelerometer Control Register datasheet"
  },
  {
    "objectID": "software/mcu/index.html#gpio",
    "href": "software/mcu/index.html#gpio",
    "title": "MCU Design",
    "section": "GPIO",
    "text": "GPIO\nThe GPIO pins used correspond to the periphjerals we are using (I2C1, I2C3, and SPI1), can be found in the STM32L432KC Datasheet under Table 14. After ensuring that all communication lines do not overlap, and that all pins requred by all peripherals were accessible, configuration of each pin must take place. More on this later."
  },
  {
    "objectID": "software/mcu/index.html#i2c1-i2c3",
    "href": "software/mcu/index.html#i2c1-i2c3",
    "title": "MCU Design",
    "section": "I2C1 & I2C3",
    "text": "I2C1 & I2C3\nI2C communication was used for this project for 2 reasons. As discussed in the addressing (I2C) section above, I2C allows us to communicate with multiple chips on the same communication bus. This is a critical function for this implementation considering that we require 3 IMUs. Yet, our MCU only has 2 I2C peripherals, (I2C1 and I2C3). It is also noted that because our IMUs only have 2 distinct configurable addresses, thus our I2C1 peripheral will communicate with the first 2 chips and I2C3 will communicate with the 3rd chip as seen in the data collection circuit schematic above.\nThe implementation of I2C in general includes initialization, writing, and reading as explained below. Writing and reading will be used within initialization to configure and verify the proper function of the IMUs, while after such configuration is completed, our while loop will solely depend on the read function to gather data from all involved accelerometer registers in the accused IMU.\n\nInitialization\nFirst, I2C peripherals data and clock lines were configured in alternate function mode. The OSPEEDR registers were configured for high-speed GPIO functionality, to ensure proper data capture. The respective AFR registers must also be configured to correspond to I2C communication lines. The I2C initialization functions also configure the RCC registers to enable the I2C clock line to get the 8MHz MSI system clock.\nThen comes the I2Cx (where x=1 or 3) configuration where bits and transmit interrupts are enabled. Configuration of the TIMINGR registers must also take place to ensure cohesive SCL speed between the MCU and IMUs, 100kHz standard mode was used for this project. As seen below in table 181, found in the STM32L432KC Reference Manual, all corresponding registers were configured to match that of the 100kHz standard mode.\n\nAfter configuration, there exists a WHO_AM_I register found in the IMU that holds a set, known value. Reading this function along with a brief check that the correct value is read, provides a gate for which the code can not pass unless I2C is functioning as expected.\n\n\nWriting With I2C\nWriting to the IMU from the MCU over I2C follows the example waveform shown below, found in Figure 371 of the STM32L432KC Reference Manual\n\n\n\nSTM32L432KC I2C Example Master Transmit\n\n\nWhen being written too, the IMU expects the following pattern, as found in the LSM6DSO32 datasheet\n\n\n\n\nLSM6DSO32 Example Master Write to Slave\n\n\n\n\nReading With I2C\nReading from the IMU to the MCU over I2C follows the example waveform shown below, found in Figure 374 of the STM32L432KC Reference Manual\n\n\n\nSTM32L432KC I2C Example Master Receive\n\n\nWhen being reading from, the IMU expects the following pattern, as found in the LSM6DSO32 datasheet\n\n\n\n\nLSM6DSO32 Example Master Read from Slave\n\n\n\n\nSimulation\nBecause during our initialization process of the I2C peripherals, where we read the WHO_AM_I register and halt the program if data is not read correctly, we could assume that I2C operates correctly. During the debug process, the ADALM2000 Logic Analyzer was used to view communication traces. Below is shown an example trace including reading of the WHO_AM_I register, and configuring the CTRL1_XL accelerometer control register on the IMU.\n\n\n\nExample Read of WHO_AM_I Regsiter, and Configuration of CTRL1_XL IMU Register"
  },
  {
    "objectID": "software/mcu/index.html#spi",
    "href": "software/mcu/index.html#spi",
    "title": "MCU Design",
    "section": "SPI",
    "text": "SPI\nwhy am I using\n\nConfiguration\n\n\nRead/Write With SPI\nBy nature with SPI, whenever you send data you receive some too\n\n\nSimulation"
  },
  {
    "objectID": "software/mcu/index.html#reading-and-decoding",
    "href": "software/mcu/index.html#reading-and-decoding",
    "title": "MCU Design",
    "section": "Reading and Decoding",
    "text": "Reading and Decoding\nAs seen in"
  },
  {
    "objectID": "software/fpga/index.html",
    "href": "software/fpga/index.html",
    "title": "FPGA Design",
    "section": "",
    "text": "For this project, the Field-Programmable Gate Array (FPGA) was utilized to generate and drive a VGA display signal. Although many microcontrollers can perform VGA output through bit-banging or specialized peripherals, producing a stable, high-resolution image at a standard VGA refresh rate (e.g., 640x480 at 60 Hz) can be computationally expensive and timing-sensitive. Microcontrollers running linear, sequential instructions often struggle to reliably meet these stringent timing requirements without additional support. In contrast, an FPGA can implement dedicated, parallel hardware logic, including a custom pixel pipeline and timing generation circuitry. This approach offloads the computational burden from the microcontroller and ensures that the critical VGA timing parameters (horizontal/vertical sync pulses, front/back porches, and active video periods) are consistently maintained. As a result, the FPGA ensures smooth, flicker-free 60 Hz display updates.\n\n\nThe VGA protocol originated with the intended purpose of displaying images on cathode ray tubes (CRTs) with a resolution of 640 x 480 pixels. These CRTs would strobe an electron beam across the display from left to right and top to bottom, exciting flourescent material to display ultimately display an image. a 15-pin connector was used to transmit the necessary analog color data, vsync/hsync signals, while providing alternative functions with I2C clock and data signals.\n\n\n\n\nFigure 1. VGA Protocol\n\n\n\nWhile the original specification included additional functionality such as I²C data channels (DDC) for EDID communication, in this project we only use: - 4-bit Color Data (r, g, b): These digital outputs from the FPGA are converted into analog signals using a simple resistor DAC. - Horizontal Sync (hs): A signal controlling the start of a new display line. - Vertical Sync (vs): A signal controlling the start of a new frame (top of the display).\nOther signals such as the I2C clock and data were not used.\nTODO: Describe Scan line back porches, etc.\n\n\n\n\nFigure 2.VGA Frame\n\n\n\n\n\nThe FPGA outputs digital color information (4 bits per channel: red, green, blue) at a 3.3 V logic level. To meet the VGA standard, these must be translated into analog signals typically ranging from 0 V (black) to about 0.7 V (full brightness). To achieve this, a simple resistor-based DAC is used. By choosing resistor values in a binary-weighted fashion (e.g., 500Ω, 1kΩ, 2kΩ, and 4kΩ for each bit), and by relying on the 75Ω input impedance of the VGA input as part of the output stage, we can generate the correct voltage range.\n\n\n\n\nFigure 3. DAC Design\n\n\n\n\n\n\nThe VGA module is responsible for generating the necessary signals to drive a VGA display. It consists of several key components:\n\nVGA Module: This is the top-level module that integrates all the components required for VGA signal generation. It takes inputs such as a reset signal and a frame switch, and outputs VGA clock, sync signals, and color data.\nInternal High-Speed Oscillator (HSOSC): Provides a base clock signal which is used by the PLL to generate the VGA clock.\nPhase-Locked Loop (PLL): Converts the internal oscillator’s frequency to the required 25 MHz VGA clock.\nVGA Controller: Generates horizontal and vertical sync signals, as well as blanking signals, based on the VGA timing specifications.\nVideo Generator (videoGen): Determines the color of each pixel based on the current frame and coordinates. It uses a multiplexer to select the appropriate frame data and checks if the current pixel is within any defined rectangles.\nFrame Modules: Each frame module (e.g., image_frame0, image_frame1, etc.) defines a set of rectangles representing different parts of an image for a specific frame.\nFrame Multiplexer (frame_mux): Selects the appropriate frame data based on the frame_switch input.\nRectangle and Line Generators: These modules determine if the current pixel is within a defined rectangle or on a line, respectively.\n\nThe block diagram below illustrates the interconnections between these components:\n\n\n\n\nFigure 4. VGA Block Diagram\n\n\n\n\n\n\n\nTo control which frame is displayed, the microcontroller sets 3 I/O lines to a specific pattern of states (0-7 in binary) to select one of eight predefined frames. Each frame corresponds to a particular arrangement of graphical elements. This simple and low-bandwidth interface allows the microcontroller to direct the FPGA’s output without requiring the MCU to handle the stringent timing or memory requirements associated with full video generation."
  },
  {
    "objectID": "software/fpga/index.html#vga-protocol",
    "href": "software/fpga/index.html#vga-protocol",
    "title": "FPGA Design",
    "section": "",
    "text": "The VGA protocol originated with the intended purpose of displaying images on cathode ray tubes (CRTs) with a resolution of 640 x 480 pixels. These CRTs would strobe an electron beam across the display from left to right and top to bottom, exciting flourescent material to display ultimately display an image. a 15-pin connector was used to transmit the necessary analog color data, vsync/hsync signals, while providing alternative functions with I2C clock and data signals.\n\n\n\nVGA Protocol\n\n\nAs part of this project we made use of the VGA protocol only making use of the following signals: - 4-bit color data (r, g, b) - Horizontal sync (hs) - Vertical sync (vs)\nOther signals such as the I2C clock and data were not used.\n\n\n\nVGA Frame\n\n\n\n\nAs part of the VGA design, we needed to convert the 4-bit color data from the MCU into analog signals with a voltage range of 0-0.7V. This was done using a custom DAC design, comprising of resistors of values 500Ω, 1kΩ, 2kΩ, and 4kΩ. Given a 3.3V digital input for each bit along with a 75Ω impedance assumed on the VGA’s ADC we can expect the following calculated equation to represent voltage outputs TODO: add equation\n\n\n\nDAC Design"
  },
  {
    "objectID": "project_logistics/index.html",
    "href": "project_logistics/index.html",
    "title": "Project Logistics",
    "section": "",
    "text": "Bill Of Materials (BOM)\n\n\n\nDone using Google Sheets, Link to BOM\n\n\n\n\nProject Timeline\n\n\n\nDone using Trello.com with BigPicture extension"
  },
  {
    "objectID": "mechanical_design/index.html",
    "href": "mechanical_design/index.html",
    "title": "Mechanical Design",
    "section": "",
    "text": "The mechanical design for this project was minimal, given the scope of the class. The only thing that needed to be designed was the housing units for each IMU, which allow for the IMUs to be strapped to the body using velcro straps, hold the IMU in a predefined direction, be comfortable for the wearer, and allow access to the STEMMA quick connect terminals. The final result of the IMU mounts is seen below.\n FINAL DRAWINGS AND CAD MODELS + WHAT IT LOOKS LIKE WHEN WORN ON SOMEONE\nThe final product features Squat Hero labeling, labels telling where to put it on the body, and an indication of the configured chip address for clarity. This helps minimize confusion.\nEven though this is an embedded systems class, the prototype timeline can be seen below as a tribute to the engineering process. Significant changes from the original design include: - features to make tolerancing fit the IMU better - smoothing out the edges for user comfort and - sufficient labeling to help reduce any confusion\n INSERT PROTOTYPE TIMELINE PICTURES!"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Squat Hero",
    "section": "",
    "text": "Welcome to our final project for Micro Ps! A class at Harvey Mudd College focused on Microprocessor and FPGA design and application.\nThis project was focused on implamenting FPGA and MCU functionalities in order to measure joint angles using IMUs and display a side profile stick figure to a screen via vga cable. Tracking body motion is the first step to many kinematic solutions, and will hopefully be the first steps towards a long desired project further explained in the project ideation tab."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "HMC E155 “Micro Ps” course website"
  },
  {
    "objectID": "hardware/index.html",
    "href": "hardware/index.html",
    "title": "Hardware",
    "section": "",
    "text": "THIS WILL HAVE AN OVERVIEW OF THE WHOLE CIRCUIT SCHEMATIC OF THE HARDWARE, INCLUDING FUNCTIONALITIES OF CONNECTIONS.\n\nPARAGRAPH DESCRIBING THE OVERALL GOAL OF THE HARDWARE, IE: WHAT DOES IT ENABLE US TO DO\nPICTURE OF THE CIRCUIT SCHEMATIC\nDESCRIPTION OF THE POWER SPECIFICS\nDESCRIPTION OF THE MCU HARDWARE / I2C, IE: WHAT PINS DID I USE AND WHY\nDESCIPTION OF THE SPI CONNECTIONS BETWEEN MCU AND FPGA\nVGA HARDWARE\nPICTURE OF THE FINAL HARDWARE IN PERSON"
  },
  {
    "objectID": "inventors/index.html",
    "href": "inventors/index.html",
    "title": "Inventors",
    "section": "",
    "text": "Jason Bowman\nEngineering major at Harvey Mudd College (grad 25), with experience in embedded systems, control systems, DSP, mechanical design.\n\n\n\nMicro Ps was a must-take class as I aimed to bridge the gap between idea and product. In the past, I have done personal projects involving digital electronics, where the knowledge gained in this class would have proved immensely helpful. Squat Hero is the first of future many individual projects involving embedded systems and digital electronics that I plan on doing\n\n  🔗 LinkedIn     👤 Jason’s Personal Website  \n\n\n\nKet Hollingsworth\nJoint Major in Computer Science and Mathematics at Harvey Mudd College (grad 25), with experience in Embedded Systems, Machine Learning, and Software Engineering.\n\n\n\nMuch of my previous research in the field of TinyML and Edge Compute Systems along with my work with ExploraVist has required me to work with embedded systems. At ExploraVist I built an embedded accessibility device, but made extensive use of available libraries and frameworks to do so. I always wanted to understand how these systems worked, and Micro ps (and this project Squat Hero) acted as a great introduction to the world of digital electronics and embedded systems.\n\n  🔗 LinkedIn"
  },
  {
    "objectID": "project_ideation/index.html",
    "href": "project_ideation/index.html",
    "title": "Project Ideation",
    "section": "",
    "text": "The inspiration for this project came from an idea Jason had in high school while helping middle school students learn proper squat technique. The initial concept was to design a lightweight exoskeleton using motors to apply gentle resistance, guiding users through the ideal squat motion. Unlike traditional exoskeletons, this design would focus on being lightweight, affordable, and non-intrusive. Instead of doing the work for the user, it would act as a guide, helping them develop proper form without overly relying on external assistance. This approach would provide accessible and new-age fitness technology to a broad audience, including personal trainers working to enhance client performance, physical therapists helping patients recover from injuries, athletes refining their technique, and even beginners looking to build confidence and prevent injuries. By prioritizing simplicity and affordability, the design aims to maximize training time and allow the quantification of the squat form to be used for feedback training.\n\n\n\nGeneralization of squat form, image source\n\n\nThis project is an essential stepping stone in our knowledge and product development, aiming to ultimately provide a useful final product to a client. In the scope of Micro Ps, we are integrating IMU functionality, similar to what will be found in the final product, with an FPGA-driving VGA to create a game interface, further details of which can be found under the software section of the website. We chose to use IMUs for position decomposition due to their lightweight and simple-to-use interface, which eliminates the need for extensive mechanical design and complex user calibration associated with hardware-centric potentiometer decoding. Future implementations may include IMU-controlled feedback motors for selected leg joints, enhancing the overall functionality and usability of the system."
  },
  {
    "objectID": "result/index.html",
    "href": "result/index.html",
    "title": "Result",
    "section": "",
    "text": "THIS WILL HAVE A VIDEO OF THE FINAL PRODUCT AND MAYBE A SKIT FROM DEMO DAY"
  },
  {
    "objectID": "software/index.html",
    "href": "software/index.html",
    "title": "Software",
    "section": "",
    "text": "THIS WILL HAVE AN OVERVIEW OF WHAT THIS SECTION TALKS ABOUT AND MAYBE WHY WE DO WHAT THINGS ON THE MCU/FPGA RESPECTIVELY.\nTHINGS WE DID ON THE MCU - READ DATA WITH I2C - CONVERTED TO USABLE DATA - GENERATED A STATUS BIT TO INDICATE FULL SQUAT - SEND DATA WITH SPI\nTHINGS WE DID ON THE FPGA - READ DATA FROM SPI - DECODE DATA AND GENERATE LINES READABLE THROUGH VGA - DISPLAY VIA VGA CONNECTOR\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMCU Design\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFPGA Design\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "software/fpga/index.html#parallel-communication-interface",
    "href": "software/fpga/index.html#parallel-communication-interface",
    "title": "FPGA Design",
    "section": "",
    "text": "To control which frame is displayed, the microcontroller sets 3 I/O lines to a specific pattern of states (0-7 in binary) to select one of eight predefined frames. Each frame corresponds to a particular arrangement of graphical elements. This simple and low-bandwidth interface allows the microcontroller to direct the FPGA’s output without requiring the MCU to handle the stringent timing or memory requirements associated with full video generation."
  },
  {
    "objectID": "software/fpga/index.html#vga-block-diagram",
    "href": "software/fpga/index.html#vga-block-diagram",
    "title": "FPGA Design",
    "section": "",
    "text": "The VGA module is responsible for generating the necessary signals to drive a VGA display. It consists of several key components:\n\nVGA Module: This is the top-level module that integrates all the components required for VGA signal generation. It takes inputs such as a reset signal and a frame switch, and outputs VGA clock, sync signals, and color data.\nInternal High-Speed Oscillator (HSOSC): Provides a base clock signal which is used by the PLL to generate the VGA clock.\nPhase-Locked Loop (PLL): Converts the internal oscillator’s frequency to the required 25 MHz VGA clock.\nVGA Controller: Generates horizontal and vertical sync signals, as well as blanking signals, based on the VGA timing specifications.\nVideo Generator (videoGen): Determines the color of each pixel based on the current frame and coordinates. It uses a multiplexer to select the appropriate frame data and checks if the current pixel is within any defined rectangles.\nFrame Modules: Each frame module (e.g., image_frame0, image_frame1, etc.) defines a set of rectangles representing different parts of an image for a specific frame.\nFrame Multiplexer (frame_mux): Selects the appropriate frame data based on the frame_switch input.\nRectangle and Line Generators: These modules determine if the current pixel is within a defined rectangle or on a line, respectively.\n\nThe block diagram below illustrates the interconnections between these components:\n\n\n\nVGA Block Diagram"
  },
  {
    "objectID": "software/fpga/index.html#vga",
    "href": "software/fpga/index.html#vga",
    "title": "FPGA Design",
    "section": "",
    "text": "The VGA protocol originated with the intended purpose of displaying images on cathode ray tubes (CRTs) with a resolution of 640 x 480 pixels. These CRTs would strobe an electron beam across the display from left to right and top to bottom, exciting flourescent material to display ultimately display an image. a 15-pin connector was used to transmit the necessary analog color data, vsync/hsync signals, while providing alternative functions with I2C clock and data signals.\n\n\n\nVGA Protocol\n\n\nAs part of this project we made use of the VGA protocol only making use of the following signals: - 4-bit color data (r, g, b) - Horizontal sync (hs) - Vertical sync (vs)\nOther signals such as the I2C clock and data were not used.\n\n\n\nVGA Frame\n\n\n\n\nAs part of the VGA design, we needed to convert the 4-bit color data from the MCU into analog signals with a voltage range of 0-0.7V. This was done using a custom DAC design, comprising of resistors of values 500Ω, 1kΩ, 2kΩ, and 4kΩ. Given a 3.3V digital input for each bit along with a 75Ω impedance assumed on the VGA’s ADC we can expect the following calculated equation to represent voltage outputs TODO: add equation\n\n\n\nDAC Design"
  },
  {
    "objectID": "software/fpga/index.html#vga-dispay",
    "href": "software/fpga/index.html#vga-dispay",
    "title": "FPGA Design",
    "section": "",
    "text": "The VGA protocol originated with the intended purpose of displaying images on cathode ray tubes (CRTs) with a resolution of 640 x 480 pixels. These CRTs would strobe an electron beam across the display from left to right and top to bottom, exciting flourescent material to display ultimately display an image. a 15-pin connector was used to transmit the necessary analog color data, vsync/hsync signals, while providing alternative functions with I2C clock and data signals.\n\n\n\n\nFigure 1. VGA Protocol\n\n\n\nWhile the original specification included additional functionality such as I²C data channels (DDC) for EDID communication, in this project we only use: - 4-bit Color Data (r, g, b): These digital outputs from the FPGA are converted into analog signals using a simple resistor DAC. - Horizontal Sync (hs): A signal controlling the start of a new display line. - Vertical Sync (vs): A signal controlling the start of a new frame (top of the display).\nOther signals such as the I2C clock and data were not used.\nTODO: Describe Scan line back porches, etc.\n\n\n\n\nFigure 2.VGA Frame\n\n\n\n\n\nThe FPGA outputs digital color information (4 bits per channel: red, green, blue) at a 3.3 V logic level. To meet the VGA standard, these must be translated into analog signals typically ranging from 0 V (black) to about 0.7 V (full brightness). To achieve this, a simple resistor-based DAC is used. By choosing resistor values in a binary-weighted fashion (e.g., 500Ω, 1kΩ, 2kΩ, and 4kΩ for each bit), and by relying on the 75Ω input impedance of the VGA input as part of the output stage, we can generate the correct voltage range.\n\n\n\n\nFigure 3. DAC Design\n\n\n\n\n\n\nThe VGA module is responsible for generating the necessary signals to drive a VGA display. It consists of several key components:\n\nVGA Module: This is the top-level module that integrates all the components required for VGA signal generation. It takes inputs such as a reset signal and a frame switch, and outputs VGA clock, sync signals, and color data.\nInternal High-Speed Oscillator (HSOSC): Provides a base clock signal which is used by the PLL to generate the VGA clock.\nPhase-Locked Loop (PLL): Converts the internal oscillator’s frequency to the required 25 MHz VGA clock.\nVGA Controller: Generates horizontal and vertical sync signals, as well as blanking signals, based on the VGA timing specifications.\nVideo Generator (videoGen): Determines the color of each pixel based on the current frame and coordinates. It uses a multiplexer to select the appropriate frame data and checks if the current pixel is within any defined rectangles.\nFrame Modules: Each frame module (e.g., image_frame0, image_frame1, etc.) defines a set of rectangles representing different parts of an image for a specific frame.\nFrame Multiplexer (frame_mux): Selects the appropriate frame data based on the frame_switch input.\nRectangle and Line Generators: These modules determine if the current pixel is within a defined rectangle or on a line, respectively.\n\nThe block diagram below illustrates the interconnections between these components:\n\n\n\n\nFigure 4. VGA Block Diagram"
  }
]